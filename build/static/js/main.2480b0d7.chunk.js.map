{"version":3,"sources":["context/appContext.js","context/appReducer.js","context/AppState.js","components/Input/Input.js","components/Output/Output.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","state","type","payload","loading","allTime","week","AppState","props","useReducer","appReducer","dispatch","Provider","value","onLoading","getAllTime200","getChart","err","chart","console","log","songs","getChartLists","listCharts","charts","getChartWeek","search","length","clearWeek","children","Media","createMedia","breakpoints","mobile","tablet","computer","largeScreen","widescreen","Input","appState","useContext","useState","setSearch","firstButton","setFirstButton","secondButton","setSecondButton","firstButtonClick","secondButtonClick","Segment","Grid","centered","Column","width","Header","as","block","floated","at","Button","toggle","size","active","onClick","content","greaterThanOrEqual","textAlign","style","onChange","e","target","disabled","placeholder","primary","color","Output","Dimmer","Loader","Row","columns","map","i","k","key","inverted","className","marginBottom","Label","ribbon","rank","Card","Content","Image","src","cover","artist","Meta","title","Statistic","Group","horizontal","label","position","peakPosition","positionLastWeek","weeksOnChart","AppMedia","mediaStyles","createMediaStyle","MediaContextProvider","App","height","backgroundColor","margin","id","href","rel","icon","window","close","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2480b0d7.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport default AppContext;\r\n","export default (state, { type, payload }) => {\r\n  switch (type) {\r\n    case \"LOADING\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case \"GET_ALLTIME_200\":\r\n      return {\r\n        ...state,\r\n        allTime: [...state.allTime, payload],\r\n      };\r\n    case \"GET_HOT100_WEEK\":\r\n      return {\r\n        ...state,\r\n        week: [...state.week, payload],\r\n      };\r\n    case \"CLEAR_HOT100_WEEK\":\r\n      return {\r\n        ...state,\r\n        week: [],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer } from \"react\";\r\nimport AppContext from \"./appContext\";\r\nimport appReducer from \"./appReducer\";\r\nimport { getChart, listCharts } from \"billboard-top-100\";\r\n\r\nconst AppState = (props) => {\r\n  const initialState = {\r\n    allTime: [],\r\n    week: [],\r\n    loading: false,\r\n  };\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  // Get Greatest 200 list\r\n  const getAllTime200 = () => {\r\n    getChart(\"greatest-billboard-200-albums\", (err, chart) => {\r\n      if (err) console.log(err);\r\n      dispatch({ type: \"GET_ALLTIME_200\", payload: chart });\r\n      console.log(\"greatest\", chart.songs);\r\n    });\r\n  };\r\n\r\n  // lists\r\n  const getChartLists = () => {\r\n    listCharts((err, charts) => {\r\n      if (err) console.log(err);\r\n      console.log(charts);\r\n    });\r\n  };\r\n\r\n  //Get week Chart\r\n  const getChartWeek = (search) => {\r\n    getChart(\"hot-100\", search, (err, chart) => {\r\n      if (state.week.length === 0) {\r\n        dispatch({ type: \"GET_HOT100_WEEK\", payload: chart });\r\n      } else if (err) {\r\n        console.log(err);\r\n      }\r\n    });\r\n  };\r\n\r\n  const clearWeek = () => dispatch({ type: \"CLEAR_HOT100_WEEK\" });\r\n\r\n  const onLoading = () => dispatch({ type: \"LOADING\" });\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        loading: state.loading,\r\n        week: state.week,\r\n        allTime: state.allTime,\r\n        onLoading,\r\n        getAllTime200,\r\n        getChartLists,\r\n        getChartWeek,\r\n        clearWeek,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport default AppState;\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Segment,\r\n  Input as SemanticInput,\r\n  Header,\r\n  Button,\r\n} from \"semantic-ui-react\";\r\nimport AppContext from \"../../context/appContext\";\r\nimport { createMedia } from \"@artsy/fresnel\";\r\n\r\nconst AppMedia = createMedia({\r\n  breakpoints: {\r\n    mobile: 320,\r\n    tablet: 768,\r\n    computer: 992,\r\n    largeScreen: 1400,\r\n    widescreen: 1920,\r\n  },\r\n});\r\n\r\nconst { Media } = AppMedia;\r\n\r\nconst Input = () => {\r\n  const appState = useContext(AppContext);\r\n  const { allTime, getChartWeek, clearWeek, getAllTime200 } = appState;\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const [firstButton, setFirstButton] = useState(false);\r\n  const [secondButton, setSecondButton] = useState(false);\r\n\r\n  const firstButtonClick = () => {\r\n    setFirstButton(!firstButton);\r\n    setSecondButton(false);\r\n    if (allTime.length < 1) {\r\n      getAllTime200();\r\n    }\r\n  };\r\n  const secondButtonClick = () => {\r\n    setFirstButton(false);\r\n    setSecondButton(!secondButton);\r\n  };\r\n  return (\r\n    <Segment>\r\n      <Grid centered>\r\n        {/* Nav */}\r\n        <Grid.Column width={16}>\r\n          <Header as=\"div\" block>\r\n            <Grid>\r\n              {/* Mobile */}\r\n              <Grid.Column floated=\"left\" width={8} as={Media} at=\"mobile\">\r\n                <Button\r\n                  toggle\r\n                  size=\"huge\"\r\n                  active={firstButton}\r\n                  onClick={firstButtonClick}\r\n                  content=\"Billboard Top 200 Albums \"\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={7} as={Media} at=\"mobile\">\r\n                <Button\r\n                  toggle\r\n                  size=\"huge\"\r\n                  active={secondButton}\r\n                  onClick={secondButtonClick}\r\n                  content=\"Billboard Hot 100\"\r\n                />\r\n              </Grid.Column>\r\n\r\n              {/* Tablet */}\r\n              <Grid.Column floated=\"left\" width={6} as={Media} at=\"tablet\">\r\n                <Button\r\n                  toggle\r\n                  size=\"massive\"\r\n                  active={firstButton}\r\n                  onClick={firstButtonClick}\r\n                  content=\"Billboard Top 200 Albums \"\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={6} as={Media} at=\"tablet\">\r\n                <Button\r\n                  toggle\r\n                  size=\"massive\"\r\n                  active={secondButton}\r\n                  onClick={secondButtonClick}\r\n                  content=\"Billboard Hot 100\"\r\n                />\r\n              </Grid.Column>\r\n\r\n              {/* Greater */}\r\n              <Grid.Column\r\n                floated=\"left\"\r\n                width={5}\r\n                as={Media}\r\n                greaterThanOrEqual=\"computer\"\r\n              >\r\n                <Button\r\n                  toggle\r\n                  size=\"massive\"\r\n                  active={firstButton}\r\n                  onClick={firstButtonClick}\r\n                  content=\"Billboard Top 200 Albums \"\r\n                />\r\n              </Grid.Column>\r\n              <Grid.Column\r\n                floated=\"right\"\r\n                width={5}\r\n                as={Media}\r\n                greaterThanOrEqual=\"computer\"\r\n              >\r\n                <Button\r\n                  toggle\r\n                  size=\"massive\"\r\n                  active={secondButton}\r\n                  onClick={secondButtonClick}\r\n                  content=\"Billboard Hot 100\"\r\n                />\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Header>\r\n        </Grid.Column>\r\n\r\n        {/* Search area */}\r\n\r\n        {secondButton && (\r\n          <>\r\n            {/* Mobile */}\r\n            <Grid.Column width={16} as={Media} at=\"mobile\">\r\n              <Header size=\"huge\" textAlign=\"center\">\r\n                Billboard Hot 100 Search\r\n              </Header>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={16} as={Media} at=\"mobile\">\r\n              <SemanticInput\r\n                style={{ width: \"100%\" }}\r\n                type=\"text\"\r\n                onChange={(e) => setSearch(e.target.value)}\r\n                size=\"large\"\r\n                disabled={false}\r\n                loading={false}\r\n                placeholder=\"YYYY-MM-DD\"\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={16} as={Media} at=\"mobile\">\r\n              {search.length > 9 ? (\r\n                <Button\r\n                  content=\"Submit\"\r\n                  primary\r\n                  onClick={() => getChartWeek(search)}\r\n                />\r\n              ) : null}\r\n\r\n              {search.length > 9 ? (\r\n                <Button\r\n                  content=\"Clear\"\r\n                  color=\"red\"\r\n                  onClick={() => clearWeek()}\r\n                />\r\n              ) : null}\r\n            </Grid.Column>\r\n\r\n            {/* Tablet */}\r\n            <Grid.Column width={4} as={Media} greaterThanOrEqual=\"tablet\">\r\n              <Header size=\"huge\" textAlign=\"center\">\r\n                Billboard Hot 100 Search\r\n              </Header>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={8} as={Media} greaterThanOrEqual=\"tablet\">\r\n              <SemanticInput\r\n                style={{ width: \"100%\" }}\r\n                type=\"text\"\r\n                onChange={(e) => setSearch(e.target.value)}\r\n                size=\"large\"\r\n                disabled={false}\r\n                loading={false}\r\n                placeholder=\"YYYY-MM-DD\"\r\n              />\r\n            </Grid.Column>\r\n            <Grid.Column width={4} as={Media} greaterThanOrEqual=\"tablet\">\r\n              {search.length > 9 ? (\r\n                <Button\r\n                  content=\"Submit\"\r\n                  primary\r\n                  onClick={() => getChartWeek(search)}\r\n                />\r\n              ) : null}\r\n\r\n              {search.length > 9 ? (\r\n                <Button\r\n                  content=\"Clear\"\r\n                  color=\"red\"\r\n                  onClick={() => clearWeek()}\r\n                />\r\n              ) : null}\r\n            </Grid.Column>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n  Grid,\r\n  Segment,\r\n  Label,\r\n  Card,\r\n  Statistic,\r\n  Dimmer,\r\n  Loader,\r\n  Image,\r\n} from \"semantic-ui-react\";\r\nimport AppContext from \"../../context/appContext\";\r\nimport { createMedia } from \"@artsy/fresnel\";\r\n\r\nconst AppMedia = createMedia({\r\n  breakpoints: {\r\n    mobile: 320,\r\n    tablet: 768,\r\n    computer: 992,\r\n    largeScreen: 1400,\r\n    widescreen: 1920,\r\n  },\r\n});\r\n\r\nconst { Media } = AppMedia;\r\n\r\nconst Output = () => {\r\n  const appState = useContext(AppContext);\r\n  const { allTime, week, loading } = appState;\r\n\r\n  return (allTime.length > 0) | (week.length > 0) ? (\r\n    <>\r\n      {/* Mobile */}\r\n\r\n      <Segment as={Media} at=\"mobile\">\r\n        <Dimmer active={loading}>\r\n          <Loader />\r\n        </Dimmer>\r\n        {week.length > 0 && (\r\n          <Grid centered>\r\n            <Grid.Row centered columns={2}>\r\n              {week[0].songs.map((i, k) => {\r\n                return (\r\n                  <Grid.Column key={k}>\r\n                    <Segment\r\n                      inverted\r\n                      className=\"OutputItem\"\r\n                      style={{ marginBottom: 10 }}\r\n                    >\r\n                      <Label color=\"purple\" size=\"large\" ribbon>\r\n                        {i.rank}\r\n                      </Label>\r\n                      <Card>\r\n                        <Card.Content>\r\n                          <Image floated=\"left\" size=\"tiny\" src={i.cover} />\r\n                          <Card.Header>{i.artist}</Card.Header>\r\n                          <Card.Meta>\r\n                            <span>{i.title}</span>\r\n                          </Card.Meta>\r\n                          {/* <Card.Description>{i.title}</Card.Description> */}\r\n                        </Card.Content>\r\n                      </Card>\r\n                      <Statistic.Group inverted size=\"mini\" horizontal>\r\n                        <Statistic\r\n                          inverted\r\n                          color=\"yellow\"\r\n                          label=\"Highest Position\"\r\n                          value={i.position.peakPosition}\r\n                        />\r\n\r\n                        {i.position.positionLastWeek ? (\r\n                          <Statistic\r\n                            inverted\r\n                            color=\"teal\"\r\n                            label={`Prior week's Position`}\r\n                            value={i.position.positionLastWeek}\r\n                          />\r\n                        ) : null}\r\n\r\n                        {i.position.weeksOnChart ? (\r\n                          <Statistic\r\n                            inverted\r\n                            color=\"orange\"\r\n                            label={`Week's on the chart`}\r\n                            value={i.position.weeksOnChart}\r\n                          />\r\n                        ) : null}\r\n                      </Statistic.Group>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                );\r\n              })}\r\n            </Grid.Row>\r\n          </Grid>\r\n        )}\r\n\r\n        {allTime.length > 0 && (\r\n          <Grid centered>\r\n            <Grid.Row centered columns={2}>\r\n              {allTime[0].songs.map((i, k) => {\r\n                return (\r\n                  <Grid.Column key={k}>\r\n                    <Segment\r\n                      inverted\r\n                      className=\"OutputItem\"\r\n                      style={{ marginBottom: 10 }}\r\n                    >\r\n                      <Label color=\"purple\" size=\"large\" ribbon>\r\n                        {i.rank}\r\n                      </Label>\r\n                      <Card>\r\n                        <Card.Content>\r\n                          <Image floated=\"left\" size=\"tiny\" src={i.cover} />\r\n                          <Card.Header>{i.artist}</Card.Header>\r\n                          <Card.Meta>\r\n                            <span>{i.title}</span>\r\n                          </Card.Meta>\r\n                          {/* <Card.Description>{i.title}</Card.Description> */}\r\n                        </Card.Content>\r\n                      </Card>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                );\r\n              })}\r\n            </Grid.Row>\r\n          </Grid>\r\n        )}\r\n      </Segment>\r\n\r\n      {/* Tablet */}\r\n      <Segment as={Media} at=\"tablet\">\r\n        <Dimmer active={loading}>\r\n          <Loader />\r\n        </Dimmer>\r\n\r\n        {week.length > 0 && (\r\n          <Grid centered>\r\n            <Grid.Row centered columns={4}>\r\n              {week[0].songs.map((i, k) => {\r\n                return (\r\n                  <Grid.Column key={k}>\r\n                    <Segment\r\n                      inverted\r\n                      className=\"OutputItem\"\r\n                      style={{ marginBottom: 10 }}\r\n                    >\r\n                      <Label color=\"purple\" size=\"large\" ribbon>\r\n                        {i.rank}\r\n                      </Label>\r\n                      <Card>\r\n                        <Card.Content>\r\n                          <Image floated=\"left\" size=\"tiny\" src={i.cover} />\r\n                          <Card.Header>{i.artist}</Card.Header>\r\n                          <Card.Meta>\r\n                            <span>{i.title}</span>\r\n                          </Card.Meta>\r\n                          {/* <Card.Description>{i.title}</Card.Description> */}\r\n                        </Card.Content>\r\n                      </Card>\r\n                      <Statistic.Group inverted size=\"mini\" horizontal>\r\n                        <Statistic\r\n                          inverted\r\n                          color=\"yellow\"\r\n                          label=\"Highest Position\"\r\n                          value={i.position.peakPosition}\r\n                        />\r\n\r\n                        {i.position.positionLastWeek ? (\r\n                          <Statistic\r\n                            inverted\r\n                            color=\"teal\"\r\n                            label={`Prior week's Position`}\r\n                            value={i.position.positionLastWeek}\r\n                          />\r\n                        ) : null}\r\n\r\n                        {i.position.weeksOnChart ? (\r\n                          <Statistic\r\n                            inverted\r\n                            color=\"orange\"\r\n                            label={`Week's on the chart`}\r\n                            value={i.position.weeksOnChart}\r\n                          />\r\n                        ) : null}\r\n                      </Statistic.Group>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                );\r\n              })}\r\n            </Grid.Row>\r\n          </Grid>\r\n        )}\r\n\r\n        {allTime.length > 0 && (\r\n          <Grid centered>\r\n            <Grid.Row centered columns={4}>\r\n              {allTime[0].songs.map((i, k) => {\r\n                return (\r\n                  <Grid.Column key={k}>\r\n                    <Segment\r\n                      inverted\r\n                      className=\"OutputItem\"\r\n                      style={{ marginBottom: 10 }}\r\n                    >\r\n                      <Label color=\"purple\" size=\"large\" ribbon>\r\n                        {i.rank}\r\n                      </Label>\r\n                      <Card>\r\n                        <Card.Content>\r\n                          <Image floated=\"left\" size=\"tiny\" src={i.cover} />\r\n                          <Card.Header>{i.artist}</Card.Header>\r\n                          <Card.Meta>\r\n                            <span>{i.title}</span>\r\n                          </Card.Meta>\r\n                          {/* <Card.Description>{i.title}</Card.Description> */}\r\n                        </Card.Content>\r\n                      </Card>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                );\r\n              })}\r\n            </Grid.Row>\r\n          </Grid>\r\n        )}\r\n      </Segment>\r\n\r\n      {/* Greater */}\r\n\r\n      <Segment as={Media} greaterThanOrEqual=\"computer\">\r\n        <Dimmer active={loading}>\r\n          <Loader />\r\n        </Dimmer>\r\n\r\n        {week.length > 0 && (\r\n          <Grid centered>\r\n            <Grid.Row centered columns={5}>\r\n              {week[0].songs.map((i, k) => {\r\n                return (\r\n                  <Grid.Column key={k}>\r\n                    <Segment\r\n                      inverted\r\n                      className=\"OutputItem\"\r\n                      style={{ marginBottom: 10 }}\r\n                    >\r\n                      <Label color=\"purple\" size=\"large\" ribbon>\r\n                        {i.rank}\r\n                      </Label>\r\n                      <Card>\r\n                        <Card.Content>\r\n                          <Image floated=\"left\" size=\"tiny\" src={i.cover} />\r\n                          <Card.Header>{i.artist}</Card.Header>\r\n                          <Card.Meta>\r\n                            <span>{i.title}</span>\r\n                          </Card.Meta>\r\n                          {/* <Card.Description>{i.title}</Card.Description> */}\r\n                        </Card.Content>\r\n                      </Card>\r\n                      <Statistic.Group inverted size=\"mini\" horizontal>\r\n                        <Statistic\r\n                          inverted\r\n                          color=\"yellow\"\r\n                          label=\"Highest Position\"\r\n                          value={i.position.peakPosition}\r\n                        />\r\n\r\n                        {i.position.positionLastWeek ? (\r\n                          <Statistic\r\n                            inverted\r\n                            color=\"teal\"\r\n                            label={`Prior week's Position`}\r\n                            value={i.position.positionLastWeek}\r\n                          />\r\n                        ) : null}\r\n\r\n                        {i.position.weeksOnChart ? (\r\n                          <Statistic\r\n                            inverted\r\n                            color=\"orange\"\r\n                            label={`Week's on the chart`}\r\n                            value={i.position.weeksOnChart}\r\n                          />\r\n                        ) : null}\r\n                      </Statistic.Group>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                );\r\n              })}\r\n            </Grid.Row>\r\n          </Grid>\r\n        )}\r\n\r\n        {allTime.length > 0 && (\r\n          <Grid centered>\r\n            <Grid.Row centered columns={5}>\r\n              {allTime[0].songs.map((i, k) => {\r\n                return (\r\n                  <Grid.Column key={k}>\r\n                    <Segment\r\n                      inverted\r\n                      className=\"OutputItem\"\r\n                      style={{ marginBottom: 10 }}\r\n                    >\r\n                      <Label color=\"purple\" size=\"large\" ribbon>\r\n                        {i.rank}\r\n                      </Label>\r\n                      <Card>\r\n                        <Card.Content>\r\n                          <Image floated=\"left\" size=\"tiny\" src={i.cover} />\r\n                          <Card.Header>{i.artist}</Card.Header>\r\n                          <Card.Meta>\r\n                            <span>{i.title}</span>\r\n                          </Card.Meta>\r\n                          {/* <Card.Description>{i.title}</Card.Description> */}\r\n                        </Card.Content>\r\n                      </Card>\r\n                    </Segment>\r\n                  </Grid.Column>\r\n                );\r\n              })}\r\n            </Grid.Row>\r\n          </Grid>\r\n        )}\r\n      </Segment>\r\n    </>\r\n  ) : null;\r\n};\r\n\r\nexport default Output;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AppState from \"./context/AppState\";\r\nimport { Input } from \"./components/Input\";\r\nimport { Output } from \"./components/Output/\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { createMedia } from \"@artsy/fresnel\";\r\n\r\nconst AppMedia = createMedia({\r\n  breakpoints: {\r\n    mobile: 320,\r\n    tablet: 768,\r\n    computer: 992,\r\n    largeScreen: 1400,\r\n    widescreen: 1920,\r\n  },\r\n});\r\n\r\nconst mediaStyles = AppMedia.createMediaStyle();\r\nconst { Media, MediaContextProvider } = AppMedia;\r\n\r\nconst App = () => {\r\n  return (\r\n    <AppState>\r\n      <Scrollbars\r\n        style={{\r\n          width: \"100vw\",\r\n          height: \"100vh\",\r\n          backgroundColor: \"#AE854E\",\r\n        }}\r\n      >\r\n        <style>{mediaStyles}</style>\r\n        <MediaContextProvider>\r\n          <Grid style={{ margin: 5 }}>\r\n            <Grid.Row className=\"AppHeader\" columns={\"equal\"}>\r\n              {/* Mobile */}\r\n\r\n              <Grid.Column width={16} as={Media} at=\"mobile\">\r\n                <Button.Group id=\"NoDrag\" floated=\"right\">\r\n                  <Button\r\n                    as={\"a\"}\r\n                    href=\"https://github.com/AhmedAlihashi/billboarders\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    content=\"Click here for the repository\"\r\n                  />\r\n                  <Button\r\n                    icon=\"power off\"\r\n                    color=\"red\"\r\n                    onClick={() => {\r\n                      window.close();\r\n                    }}\r\n                  />\r\n                </Button.Group>\r\n              </Grid.Column>\r\n\r\n              <Grid.Column width={16} as={Media} at=\"mobile\">\r\n                <p id=\"headerText\">BillBoarders</p>\r\n              </Grid.Column>\r\n\r\n              {/* Greater */}\r\n\r\n              <Grid.Column width={8} as={Media} greaterThanOrEqual=\"tablet\">\r\n                <p id=\"headerText\">BillBoarders</p>\r\n              </Grid.Column>\r\n\r\n              <Grid.Column width={8} as={Media} greaterThanOrEqual=\"tablet\">\r\n                <Button.Group id=\"NoDrag\" floated=\"right\">\r\n                  <Button\r\n                    as={\"a\"}\r\n                    href=\"https://github.com/AhmedAlihashi/billboarders\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    content=\"Click here for the repository\"\r\n                  />\r\n                  <Button\r\n                    icon=\"power off\"\r\n                    color=\"red\"\r\n                    onClick={() => {\r\n                      window.close();\r\n                    }}\r\n                  />\r\n                </Button.Group>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <Grid.Column id=\"NoDrag\" width={16}>\r\n              <Input />\r\n            </Grid.Column>\r\n            <Grid.Column id=\"NoDrag\" width={16}>\r\n              <Output />\r\n            </Grid.Column>\r\n          </Grid>\r\n        </MediaContextProvider>\r\n      </Scrollbars>\r\n    </AppState>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}